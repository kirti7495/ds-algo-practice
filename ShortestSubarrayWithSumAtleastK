//Ref - https://medium.com/@gregsh9.5/monotonic-queue-notes-980a019d5793
class Solution {
    public int shortestSubarray(int[] A, int k) {
        
        int n = A.length;
        int[] prefixSum = new int[n+1];
        
        prefixSum[0]=0;
        for(int i=1; i<=n; i++) {
            prefixSum[i] = A[i-1] + prefixSum[i-1];
        }
        
        int ans = n+1;
        Deque<Integer> dq = new LinkedList<>();
        
        for(int i=0; i<=n; i++) {
            while(!dq.isEmpty() && prefixSum[i] < prefixSum[dq.peekLast()]) {
                dq.removeLast();
            }
             while(!dq.isEmpty() && prefixSum[i] - prefixSum[dq.peekFirst()]>=k) {
                ans = Math.min(ans, i-dq.peekFirst());
                 dq.pollFirst();
            }
            dq.addLast(i);
        }
        return ans==n+1?-1:ans; 
    }
}
